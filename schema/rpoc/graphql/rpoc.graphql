type Address
  {
    street: String
    city: String
    postalCode: String
  }

type Context implements HasAliases
  {
    id: String!
    name: String
    description: String
    image: Image
    primaryEmail: String
    purposeStatement: String
    startDate: Date
    endDate: Date
    parent: Context
    aliases: [String]
  }

type EmploymentEvent
  {
    startDate: Date
    endDate: Date
    duration: Float
    isCurrent: Boolean
    employedAt: Organization
  }

type Event
  {
    startDate: Date
    endDate: Date
    duration: Float
    isCurrent: Boolean
  }

interface HasAliases
  {
    aliases: [String]
  }

type Image
  {
    url: Uri
  }

type Interaction
  {
    type: String
    status: String
    startDate: Date
    endDate: Date
    relatedTo: String
    obsoletedBy: Context
    description: String
  }

type Membership
  {
    person: Person
    role: Role
    context: Context
    startDate: Date
    endDate: Date
    status: String
    description: String
  }

type NamedThing
  {
    id: String!
    name: String
    description: String
    image: Image
  }

type Organization implements HasAliases
  {
    id: String!
    name: String
    description: String
    image: Image
    missionStatement: String
    foundingDate: String
    foundingLocation: Place
    aliases: [String]
  }

type Person implements HasAliases
  {
    id: String!
    name: String
    description: String
    image: Image
    primaryEmail: String
    birthDate: String
    gender: GenderType
    currentAddress: Address
    position: String
    nick: String
    avatar: Image
    hasEmploymentHistory: [EmploymentEvent]
    aliases: [String]
  }

type Place implements HasAliases
  {
    id: String!
    name: String
    aliases: [String]
  }

type Role implements HasAliases
  {
    roleName: String!
    roleType: RoleType
    description: String
    startDate: Date
    endDate: Date
    status: String
    aliases: [String]
  }

interface WithLocation
  {
    inLocation: Place
  }

